{"{\"assumptions\":{},\"sourceRoot\":\"D:\\\\LearningStuff\\\\Automation Script\\\\Javascript\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\LearningStuff\\\\Automation Script\\\\Javascript\",\"filename\":\"D:\\\\LearningStuff\\\\Automation Script\\\\Javascript\\\\wdio.conf.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"D:\\\\LearningStuff\\\\Automation Script\\\\Javascript\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-unicode-sets-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-class-static-block\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-private-property-in-object\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-class-properties\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-numeric-separator\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-nullish-coalescing-operator\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-optional-chaining\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-json-strings\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-optional-catch-binding\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-async-generators\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-object-rest-spread\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dynamic-import\",\"visitor\":{\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-export-namespace-from\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-import-meta\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]}],\"presets\":[]}:7.22.8:test":{"value":{"code":"\"use strict\";\n\nconst wdioScreenshot = require('wdio-screenshot');\nconst cucumberHtmlReporter = require('cucumber-html-reporter');\nconst cucumberJson = require(\"wdio-cucumberjs-json-reporter\").default;\nconst {\n  join\n} = require('path');\nconst multipleCucumberHtmlReporter = require('multiple-cucumber-html-reporter');\nconst {\n  removeSync\n} = require(\"fs-extra\");\nconst fs = require('fs-extra');\nconst path = require('path');\nexports.config = {\n  //\n  // ====================\n  // Runner Configuration\n  // ====================\n  // WebdriverIO supports running e2e tests as well as unit and component tests.\n  runner: 'local',\n  //\n  // ==================\n  // Specify Test Files\n  // ==================\n  // Define which test specs should run. The pattern is relative to the directory\n  // of the configuration file being run.\n  //\n  // The specs are defined as an array of spec files (optionally using wildcards\n  // that will be expanded). The test for each spec file will be run in a separate\n  // worker process. In order to have a group of spec files run in the same worker\n  // process simply enclose them in an array within the specs array.\n  //\n  // If you are calling `wdio` from an NPM script (see https://docs.npmjs.com/cli/run-script),\n  // then the current working directory is where your `package.json` resides, so `wdio`\n  // will be called from there.\n  //\n  specs: ['./Test/feature/example.feature'],\n  // Patterns to exclude.\n  exclude: [\n    // 'path/to/excluded/files'\n  ],\n  //\n  // ============\n  // Capabilities\n  // ============\n  // Define your capabilities here. WebdriverIO can run multiple capabilities at the same\n  // time. Depending on the number of capabilities, WebdriverIO launches several test\n  // sessions. Within your capabilities you can overwrite the spec and exclude options in\n  // order to group specific specs to a specific capability.\n  //\n  // First, you can define how many instances should be started at the same time. Let's\n  // say you have 3 different capabilities (Chrome, Firefox, and Safari) and you have\n  // set maxInstances to 1; wdio will spawn 3 processes. Therefore, if you have 10 spec\n  // files and you set maxInstances to 10, all spec files will get tested at the same time\n  // and 30 processes will get spawned. The property handles how many capabilities\n  // from the same test should run tests.\n  //\n  maxInstances: 10,\n  //\n  // If you have trouble getting all important capabilities together, check out the\n  // Sauce Labs platform configurator - a great tool to configure your capabilities:\n  // https://saucelabs.com/platform/platform-configurator\n  //\n  capabilities: [{\n    browserName: 'chrome'\n  }],\n  //\n  // ===================\n  // Test Configurations\n  // ===================\n  // Define all options that are relevant for the WebdriverIO instance here\n  //\n  // Level of logging verbosity: trace | debug | info | warn | error | silent\n  logLevel: 'info',\n  coloredLogs: true,\n  screenshotPath: \"./reports/errorShots\",\n  //\n  // Set specific log levels per logger\n  // loggers:\n  // - webdriver, webdriverio\n  // - @wdio/browserstack-service, @wdio/devtools-service, @wdio/sauce-service\n  // - @wdio/mocha-framework, @wdio/jasmine-framework\n  // - @wdio/local-runner\n  // - @wdio/sumologic-reporter\n  // - @wdio/cli, @wdio/config, @wdio/utils\n  // Level of logging verbosity: trace | debug | info | warn | error | silent\n  // logLevels: {\n  //     webdriver: 'info',\n  //     '@wdio/appium-service': 'info'\n  // },\n  //\n  // If you only want to run your tests until a specific amount of tests have failed use\n  // bail (default is 0 - don't bail, run all tests).\n  bail: 0,\n  //\n  // Set a base URL in order to shorten url command calls. If your `url` parameter starts\n  // with `/`, the base url gets prepended, not including the path portion of your baseUrl.\n  // If your `url` parameter starts without a scheme or `/` (like `some/path`), the base url\n  // gets prepended directly.\n  baseUrl: 'http://localhost',\n  //\n  // Default timeout for all waitFor* commands.\n  waitforTimeout: 10000,\n  //\n  // Default timeout in milliseconds for request\n  // if browser driver or grid doesn't send response\n  connectionRetryTimeout: 120000,\n  //\n  // Default request retries count\n  connectionRetryCount: 3,\n  //\n  // Test runner services\n  // Services take over a specific job you don't want to take care of. They enhance\n  // your test setup with almost no effort. Unlike plugins, they don't add new\n  // commands. Instead, they hook themselves up into the test process.\n  services: ['chromedriver'],\n  // Framework you want to run your specs with.\n  // The following are supported: Mocha, Jasmine, and Cucumber\n  // see also: https://webdriver.io/docs/frameworks\n  //\n  // Make sure you have the wdio adapter package for the specific framework installed\n  // before running any tests.\n  framework: 'cucumber',\n  //\n  // The number of times to retry the entire specfile when it fails as a whole\n  // specFileRetries: 1,\n  //\n  // Delay in seconds between the spec file retry attempts\n  // specFileRetriesDelay: 0,\n  //\n  // Whether or not retried spec files should be retried immediately or deferred to the end of the queue\n  // specFileRetriesDeferred: false,\n  //\n  // Test reporter for stdout.\n  // The only one supported by default is 'dot'\n  // see also: https://webdriver.io/docs/dot-reporter\n  reporters: ['spec', [\"cucumberjs-json\", {\n    jsonFolder: \"./reports/\"\n  }]],\n  //\n  // If you are using Cucumber you need to specify the location of your step definitions.\n  cucumberOpts: {\n    // <string[]> (file/dir) require files before executing features\n    require: ['./Test/step-definitions/example.js'],\n    // <boolean> show full backtrace for errors\n    backtrace: false,\n    // <string[]> (\"extension:module\") require files with the given EXTENSION after requiring MODULE (repeatable)\n    requireModule: [],\n    // <boolean> invoke formatters without executing steps\n    dryRun: false,\n    // <boolean> abort the run on first failure\n    failFast: false,\n    // <boolean> hide step definition snippets for pending steps\n    snippets: true,\n    // <boolean> hide source uris\n    source: true,\n    // <boolean> fail if there are any undefined or pending steps\n    strict: false,\n    // <string> (expression) only execute the features or scenarios with tags matching the expression\n    tagExpression: '',\n    // <number> timeout for step definitions\n    timeout: 60000,\n    // <boolean> Enable this config to treat undefined definitions as warnings.\n    ignoreUndefinedDefinitions: false\n  },\n  //\n  // =====\n  // Hooks\n  // =====\n  // WebdriverIO provides several hooks you can use to interfere with the test process in order to enhance\n  // it and to build services around it. You can either apply a single function or an array of\n  // methods to it. If one of them returns with a promise, WebdriverIO will wait until that promise got\n  // resolved to continue.\n\n  before: function (capabilities, specs) {\n    global.reporter = require(\"wdio-cucumberjs-json-reporter\").cucumberJson;\n  },\n  onPrepare: function (config, capabilities) {\n    removeSync(\"./reports\");\n  },\n  // After hooks to generate the HTML report\n  onComplete: () => {\n    const options = {\n      jsonDir: './reports',\n      reportPath: './reports',\n      displayDuration: true,\n      metadata: {\n        browser: {\n          name: 'chrome',\n          version: '89'\n        },\n        device: 'Local test machine',\n        platform: {\n          name: 'windows',\n          version: '10'\n        }\n      }\n    };\n    multipleCucumberHtmlReporter.generate(options);\n  },\n  afterStep: function (uri, feature, scenario, step, result) {\n    if (!scenario.passed) {\n      console.log(\"@@@@1Test\");\n      console.log(\"FAILED\");\n      const cucumberJson = require('wdio-cucumberjs-json-reporter').default;\n      cucumberJson.attach(browser.takeScreenshot(), 'image/png');\n    }\n  }\n\n  /**\n   * Gets executed once before all workers get launched.\n   * @param {object} config wdio configuration object\n   * @param {Array.<Object>} capabilities list of capabilities details\n   */\n  // onPrepare: function (config, capabilities) {\n  // },\n  /**\n   * Gets executed before a worker process is spawned and can be used to initialise specific service\n   * for that worker as well as modify runtime environments in an async fashion.\n   * @param  {string} cid      capability id (e.g 0-0)\n   * @param  {object} caps     object containing capabilities for session that will be spawn in the worker\n   * @param  {object} specs    specs to be run in the worker process\n   * @param  {object} args     object that will be merged with the main configuration once worker is initialized\n   * @param  {object} execArgv list of string arguments passed to the worker process\n   */\n  // onWorkerStart: function (cid, caps, specs, args, execArgv) {\n  // },\n  /**\n   * Gets executed just after a worker process has exited.\n   * @param  {string} cid      capability id (e.g 0-0)\n   * @param  {number} exitCode 0 - success, 1 - fail\n   * @param  {object} specs    specs to be run in the worker process\n   * @param  {number} retries  number of retries used\n   */\n  // onWorkerEnd: function (cid, exitCode, specs, retries) {\n  // },\n  /**\n   * Gets executed just before initialising the webdriver session and test framework. It allows you\n   * to manipulate configurations depending on the capability or spec.\n   * @param {object} config wdio configuration object\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {Array.<String>} specs List of spec file paths that are to be run\n   * @param {string} cid worker id (e.g. 0-0)\n   */\n  // beforeSession: function (config, capabilities, specs, cid) {\n  // },\n  /**\n   * Gets executed before test execution begins. At this point you can access to all global\n   * variables like `browser`. It is the perfect place to define custom commands.\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {Array.<String>} specs        List of spec file paths that are to be run\n   * @param {object}         browser      instance of created browser/device session\n   */\n  // before: function (capabilities, specs) {\n  // },\n  /**\n   * Runs before a WebdriverIO command gets executed.\n   * @param {string} commandName hook command name\n   * @param {Array} args arguments that command would receive\n   */\n  // beforeCommand: function (commandName, args) {\n  // },\n  /**\n   * Cucumber Hooks\n   *\n   * Runs before a Cucumber Feature.\n   * @param {string}                   uri      path to feature file\n   * @param {GherkinDocument.IFeature} feature  Cucumber feature object\n   */\n  // beforeFeature: function (uri, feature) {\n  // },\n  /**\n   *\n   * Runs before a Cucumber Scenario.\n   * @param {ITestCaseHookParameter} world    world object containing information on pickle and test step\n   * @param {object}                 context  Cucumber World object\n   */\n  // beforeScenario: function (world, context) {\n  // },\n  /**\n   *\n   * Runs before a Cucumber Step.\n   * @param {Pickle.IPickleStep} step     step data\n   * @param {IPickle}            scenario scenario pickle\n   * @param {object}             context  Cucumber World object\n   */\n  // beforeStep: function (step, scenario, context) {\n  // },\n  /**\n   *\n   * Runs after a Cucumber Step.\n   * @param {Pickle.IPickleStep} step             step data\n   * @param {IPickle}            scenario         scenario pickle\n   * @param {object}             result           results object containing scenario results\n   * @param {boolean}            result.passed    true if scenario has passed\n   * @param {string}             result.error     error stack if scenario failed\n   * @param {number}             result.duration  duration of scenario in milliseconds\n   * @param {object}             context          Cucumber World object\n   */\n  // afterStep: function (step, scenario, result, context) {\n  // },\n  /**\n   *\n   * Runs after a Cucumber Scenario.\n   * @param {ITestCaseHookParameter} world            world object containing information on pickle and test step\n   * @param {object}                 result           results object containing scenario results\n   * @param {boolean}                result.passed    true if scenario has passed\n   * @param {string}                 result.error     error stack if scenario failed\n   * @param {number}                 result.duration  duration of scenario in milliseconds\n   * @param {object}                 context          Cucumber World object\n   */\n  // afterScenario: function (world, result, context) {\n  // },\n  /**\n   *\n   * Runs after a Cucumber Feature.\n   * @param {string}                   uri      path to feature file\n   * @param {GherkinDocument.IFeature} feature  Cucumber feature object\n   */\n  // afterFeature: function (uri, feature) {\n  // },\n\n  /**\n   * Runs after a WebdriverIO command gets executed\n   * @param {string} commandName hook command name\n   * @param {Array} args arguments that command would receive\n   * @param {number} result 0 - command success, 1 - command error\n   * @param {object} error error object if any\n   */\n  // afterCommand: function (commandName, args, result, error) {\n  // },\n  /**\n   * Gets executed after all tests are done. You still have access to all global variables from\n   * the test.\n   * @param {number} result 0 - test pass, 1 - test fail\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {Array.<String>} specs List of spec file paths that ran\n   */\n  // after: function (result, capabilities, specs) {\n  // },\n  /**\n   * Gets executed right after terminating the webdriver session.\n   * @param {object} config wdio configuration object\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {Array.<String>} specs List of spec file paths that ran\n   */\n  // afterSession: function (config, capabilities, specs) {\n  // },\n  /**\n   * Gets executed after all workers got shut down and the process is about to exit. An error\n   * thrown in the onComplete hook will result in the test run failing.\n   * @param {object} exitCode 0 - success, 1 - fail\n   * @param {object} config wdio configuration object\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {<Object>} results object containing test results\n   */\n  // onComplete: function(exitCode, config, capabilities, results) {\n  // },\n  /**\n  * Gets executed when a refresh happens.\n  * @param {string} oldSessionId session ID of the old session\n  * @param {string} newSessionId session ID of the new session\n  */\n  // onReload: function(oldSessionId, newSessionId) {\n  // }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["wdioScreenshot","require","cucumberHtmlReporter","cucumberJson","default","join","multipleCucumberHtmlReporter","removeSync","fs","path","exports","config","runner","specs","exclude","maxInstances","capabilities","browserName","logLevel","coloredLogs","screenshotPath","bail","baseUrl","waitforTimeout","connectionRetryTimeout","connectionRetryCount","services","framework","reporters","jsonFolder","cucumberOpts","backtrace","requireModule","dryRun","failFast","snippets","source","strict","tagExpression","timeout","ignoreUndefinedDefinitions","before","global","reporter","onPrepare","onComplete","options","jsonDir","reportPath","displayDuration","metadata","browser","name","version","device","platform","generate","afterStep","uri","feature","scenario","step","result","passed","console","log","attach","takeScreenshot"],"sourceRoot":"D:\\LearningStuff\\Automation Script\\Javascript\\","sources":["wdio.conf.js"],"sourcesContent":["const wdioScreenshot = require('wdio-screenshot');\nconst cucumberHtmlReporter = require('cucumber-html-reporter');\nconst cucumberJson = require(\"wdio-cucumberjs-json-reporter\").default;\nconst { join } = require('path');\nconst multipleCucumberHtmlReporter = require('multiple-cucumber-html-reporter');\nconst {removeSync} = require(\"fs-extra\");\n\nconst fs = require('fs-extra');\nconst path = require('path');\n\n\n\nexports.config = {\n    //\n    // ====================\n    // Runner Configuration\n    // ====================\n    // WebdriverIO supports running e2e tests as well as unit and component tests.\n    runner: 'local',\n    //\n    // ==================\n    // Specify Test Files\n    // ==================\n    // Define which test specs should run. The pattern is relative to the directory\n    // of the configuration file being run.\n    //\n    // The specs are defined as an array of spec files (optionally using wildcards\n    // that will be expanded). The test for each spec file will be run in a separate\n    // worker process. In order to have a group of spec files run in the same worker\n    // process simply enclose them in an array within the specs array.\n    //\n    // If you are calling `wdio` from an NPM script (see https://docs.npmjs.com/cli/run-script),\n    // then the current working directory is where your `package.json` resides, so `wdio`\n    // will be called from there.\n    //\n    specs: [\n      './Test/feature/example.feature'\n    ],\n    // Patterns to exclude.\n    exclude: [\n        // 'path/to/excluded/files'\n    ],\n    //\n    // ============\n    // Capabilities\n    // ============\n    // Define your capabilities here. WebdriverIO can run multiple capabilities at the same\n    // time. Depending on the number of capabilities, WebdriverIO launches several test\n    // sessions. Within your capabilities you can overwrite the spec and exclude options in\n    // order to group specific specs to a specific capability.\n    //\n    // First, you can define how many instances should be started at the same time. Let's\n    // say you have 3 different capabilities (Chrome, Firefox, and Safari) and you have\n    // set maxInstances to 1; wdio will spawn 3 processes. Therefore, if you have 10 spec\n    // files and you set maxInstances to 10, all spec files will get tested at the same time\n    // and 30 processes will get spawned. The property handles how many capabilities\n    // from the same test should run tests.\n    //\n    maxInstances: 10,\n    //\n    // If you have trouble getting all important capabilities together, check out the\n    // Sauce Labs platform configurator - a great tool to configure your capabilities:\n    // https://saucelabs.com/platform/platform-configurator\n    //\n    capabilities: [{\n        browserName: 'chrome'\n    }],\n\n    //\n    // ===================\n    // Test Configurations\n    // ===================\n    // Define all options that are relevant for the WebdriverIO instance here\n    //\n    // Level of logging verbosity: trace | debug | info | warn | error | silent\n    logLevel: 'info',\n    coloredLogs: true,\n    screenshotPath: \"./reports/errorShots\",\n    //\n    // Set specific log levels per logger\n    // loggers:\n    // - webdriver, webdriverio\n    // - @wdio/browserstack-service, @wdio/devtools-service, @wdio/sauce-service\n    // - @wdio/mocha-framework, @wdio/jasmine-framework\n    // - @wdio/local-runner\n    // - @wdio/sumologic-reporter\n    // - @wdio/cli, @wdio/config, @wdio/utils\n    // Level of logging verbosity: trace | debug | info | warn | error | silent\n    // logLevels: {\n    //     webdriver: 'info',\n    //     '@wdio/appium-service': 'info'\n    // },\n    //\n    // If you only want to run your tests until a specific amount of tests have failed use\n    // bail (default is 0 - don't bail, run all tests).\n    bail: 0,\n    //\n    // Set a base URL in order to shorten url command calls. If your `url` parameter starts\n    // with `/`, the base url gets prepended, not including the path portion of your baseUrl.\n    // If your `url` parameter starts without a scheme or `/` (like `some/path`), the base url\n    // gets prepended directly.\n    baseUrl: 'http://localhost',\n    //\n    // Default timeout for all waitFor* commands.\n    waitforTimeout: 10000,\n    //\n    // Default timeout in milliseconds for request\n    // if browser driver or grid doesn't send response\n    connectionRetryTimeout: 120000,\n    //\n    // Default request retries count\n    connectionRetryCount: 3,\n    //\n    // Test runner services\n    // Services take over a specific job you don't want to take care of. They enhance\n    // your test setup with almost no effort. Unlike plugins, they don't add new\n    // commands. Instead, they hook themselves up into the test process.\n    services: ['chromedriver'],\n\n    // Framework you want to run your specs with.\n    // The following are supported: Mocha, Jasmine, and Cucumber\n    // see also: https://webdriver.io/docs/frameworks\n    //\n    // Make sure you have the wdio adapter package for the specific framework installed\n    // before running any tests.\n    framework: 'cucumber',\n    //\n    // The number of times to retry the entire specfile when it fails as a whole\n    // specFileRetries: 1,\n    //\n    // Delay in seconds between the spec file retry attempts\n    // specFileRetriesDelay: 0,\n    //\n    // Whether or not retried spec files should be retried immediately or deferred to the end of the queue\n    // specFileRetriesDeferred: false,\n    //\n    // Test reporter for stdout.\n    // The only one supported by default is 'dot'\n    // see also: https://webdriver.io/docs/dot-reporter\n    reporters: ['spec',[\"cucumberjs-json\",{jsonFolder:\"./reports/\"}]],\n\n    //\n    // If you are using Cucumber you need to specify the location of your step definitions.\n    cucumberOpts: {\n        // <string[]> (file/dir) require files before executing features\n        require: ['./Test/step-definitions/example.js'],\n        // <boolean> show full backtrace for errors\n        backtrace: false,\n        // <string[]> (\"extension:module\") require files with the given EXTENSION after requiring MODULE (repeatable)\n        requireModule: [],\n        // <boolean> invoke formatters without executing steps\n        dryRun: false,\n        // <boolean> abort the run on first failure\n        failFast: false,\n        // <boolean> hide step definition snippets for pending steps\n        snippets: true,\n        // <boolean> hide source uris\n        source: true,\n        // <boolean> fail if there are any undefined or pending steps\n        strict: false,\n        // <string> (expression) only execute the features or scenarios with tags matching the expression\n        tagExpression: '',\n        // <number> timeout for step definitions\n        timeout: 60000,\n\n        // <boolean> Enable this config to treat undefined definitions as warnings.\n        ignoreUndefinedDefinitions: false,\n\n        \n    },\n    \n    //\n    // =====\n    // Hooks\n    // =====\n    // WebdriverIO provides several hooks you can use to interfere with the test process in order to enhance\n    // it and to build services around it. You can either apply a single function or an array of\n    // methods to it. If one of them returns with a promise, WebdriverIO will wait until that promise got\n    // resolved to continue.\n\nbefore:function(capabilities,specs)\n{\n  global.reporter = require(\"wdio-cucumberjs-json-reporter\").cucumberJson;\n},\n\n\n\n  onPrepare: function(config, capabilities)\n  {\n    removeSync(\"./reports\");\n  },\n\n      // After hooks to generate the HTML report\n  onComplete: () => {\n    const options = {\n      jsonDir: './reports',\n      reportPath: './reports',\n      displayDuration: true,\n      metadata: {\n        browser: {\n          name: 'chrome',\n          version: '89'\n        },\n        device: 'Local test machine',\n        platform: {\n          name: 'windows',\n          version: '10'\n        }\n      }\n    };\n\n    multipleCucumberHtmlReporter.generate(options);\n  },\n\n  \n  \n    afterStep: function (uri, feature, scenario, step, result) {\n\n      if(!scenario.passed)\n      {\n        console.log(\"@@@@1Test\")\n        console.log(\"FAILED\");\n        const cucumberJson = require('wdio-cucumberjs-json-reporter').default;\n        cucumberJson.attach(browser.takeScreenshot(), 'image/png');\n      }\n     \n      \n    },\n  \n\n    /**\n     * Gets executed once before all workers get launched.\n     * @param {object} config wdio configuration object\n     * @param {Array.<Object>} capabilities list of capabilities details\n     */\n    // onPrepare: function (config, capabilities) {\n    // },\n    /**\n     * Gets executed before a worker process is spawned and can be used to initialise specific service\n     * for that worker as well as modify runtime environments in an async fashion.\n     * @param  {string} cid      capability id (e.g 0-0)\n     * @param  {object} caps     object containing capabilities for session that will be spawn in the worker\n     * @param  {object} specs    specs to be run in the worker process\n     * @param  {object} args     object that will be merged with the main configuration once worker is initialized\n     * @param  {object} execArgv list of string arguments passed to the worker process\n     */\n    // onWorkerStart: function (cid, caps, specs, args, execArgv) {\n    // },\n    /**\n     * Gets executed just after a worker process has exited.\n     * @param  {string} cid      capability id (e.g 0-0)\n     * @param  {number} exitCode 0 - success, 1 - fail\n     * @param  {object} specs    specs to be run in the worker process\n     * @param  {number} retries  number of retries used\n     */\n    // onWorkerEnd: function (cid, exitCode, specs, retries) {\n    // },\n    /**\n     * Gets executed just before initialising the webdriver session and test framework. It allows you\n     * to manipulate configurations depending on the capability or spec.\n     * @param {object} config wdio configuration object\n     * @param {Array.<Object>} capabilities list of capabilities details\n     * @param {Array.<String>} specs List of spec file paths that are to be run\n     * @param {string} cid worker id (e.g. 0-0)\n     */\n    // beforeSession: function (config, capabilities, specs, cid) {\n    // },\n    /**\n     * Gets executed before test execution begins. At this point you can access to all global\n     * variables like `browser`. It is the perfect place to define custom commands.\n     * @param {Array.<Object>} capabilities list of capabilities details\n     * @param {Array.<String>} specs        List of spec file paths that are to be run\n     * @param {object}         browser      instance of created browser/device session\n     */\n    // before: function (capabilities, specs) {\n    // },\n    /**\n     * Runs before a WebdriverIO command gets executed.\n     * @param {string} commandName hook command name\n     * @param {Array} args arguments that command would receive\n     */\n    // beforeCommand: function (commandName, args) {\n    // },\n    /**\n     * Cucumber Hooks\n     *\n     * Runs before a Cucumber Feature.\n     * @param {string}                   uri      path to feature file\n     * @param {GherkinDocument.IFeature} feature  Cucumber feature object\n     */\n    // beforeFeature: function (uri, feature) {\n    // },\n    /**\n     *\n     * Runs before a Cucumber Scenario.\n     * @param {ITestCaseHookParameter} world    world object containing information on pickle and test step\n     * @param {object}                 context  Cucumber World object\n     */\n    // beforeScenario: function (world, context) {\n    // },\n    /**\n     *\n     * Runs before a Cucumber Step.\n     * @param {Pickle.IPickleStep} step     step data\n     * @param {IPickle}            scenario scenario pickle\n     * @param {object}             context  Cucumber World object\n     */\n    // beforeStep: function (step, scenario, context) {\n    // },\n    /**\n     *\n     * Runs after a Cucumber Step.\n     * @param {Pickle.IPickleStep} step             step data\n     * @param {IPickle}            scenario         scenario pickle\n     * @param {object}             result           results object containing scenario results\n     * @param {boolean}            result.passed    true if scenario has passed\n     * @param {string}             result.error     error stack if scenario failed\n     * @param {number}             result.duration  duration of scenario in milliseconds\n     * @param {object}             context          Cucumber World object\n     */\n    // afterStep: function (step, scenario, result, context) {\n    // },\n    /**\n     *\n     * Runs after a Cucumber Scenario.\n     * @param {ITestCaseHookParameter} world            world object containing information on pickle and test step\n     * @param {object}                 result           results object containing scenario results\n     * @param {boolean}                result.passed    true if scenario has passed\n     * @param {string}                 result.error     error stack if scenario failed\n     * @param {number}                 result.duration  duration of scenario in milliseconds\n     * @param {object}                 context          Cucumber World object\n     */\n    // afterScenario: function (world, result, context) {\n    // },\n    /**\n     *\n     * Runs after a Cucumber Feature.\n     * @param {string}                   uri      path to feature file\n     * @param {GherkinDocument.IFeature} feature  Cucumber feature object\n     */\n    // afterFeature: function (uri, feature) {\n    // },\n    \n    /**\n     * Runs after a WebdriverIO command gets executed\n     * @param {string} commandName hook command name\n     * @param {Array} args arguments that command would receive\n     * @param {number} result 0 - command success, 1 - command error\n     * @param {object} error error object if any\n     */\n    // afterCommand: function (commandName, args, result, error) {\n    // },\n    /**\n     * Gets executed after all tests are done. You still have access to all global variables from\n     * the test.\n     * @param {number} result 0 - test pass, 1 - test fail\n     * @param {Array.<Object>} capabilities list of capabilities details\n     * @param {Array.<String>} specs List of spec file paths that ran\n     */\n    // after: function (result, capabilities, specs) {\n    // },\n    /**\n     * Gets executed right after terminating the webdriver session.\n     * @param {object} config wdio configuration object\n     * @param {Array.<Object>} capabilities list of capabilities details\n     * @param {Array.<String>} specs List of spec file paths that ran\n     */\n    // afterSession: function (config, capabilities, specs) {\n    // },\n    /**\n     * Gets executed after all workers got shut down and the process is about to exit. An error\n     * thrown in the onComplete hook will result in the test run failing.\n     * @param {object} exitCode 0 - success, 1 - fail\n     * @param {object} config wdio configuration object\n     * @param {Array.<Object>} capabilities list of capabilities details\n     * @param {<Object>} results object containing test results\n     */\n    // onComplete: function(exitCode, config, capabilities, results) {\n    // },\n    /**\n    * Gets executed when a refresh happens.\n    * @param {string} oldSessionId session ID of the old session\n    * @param {string} newSessionId session ID of the new session\n    */\n    // onReload: function(oldSessionId, newSessionId) {\n    // }\n}\n"],"mappings":"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,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,MAAM,EAAE;IAEzD,IAAG,CAACF,QAAQ,CAACG,MAAM,EACnB;MACEC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;MACxBD,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;MACrB,MAAM9D,YAAY,GAAGF,OAAO,CAAC,+BAA+B,CAAC,CAACG,OAAO;MACrED,YAAY,CAAC+D,MAAM,CAACf,OAAO,CAACgB,cAAc,CAAC,CAAC,EAAE,WAAW,CAAC;IAC5D;EAGF;;EAGA;AACJ;AACA;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;EACI;EACA;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;AACA;EACI;EACA;AACJ,CAAC"}},"mtime":1689683808332},"{\"assumptions\":{},\"sourceRoot\":\"D:\\\\LearningStuff\\\\Automation Script\\\\Javascript\\\\Test\\\\step-definitions\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\LearningStuff\\\\Automation Script\\\\Javascript\",\"filename\":\"D:\\\\LearningStuff\\\\Automation Script\\\\Javascript\\\\Test\\\\step-definitions\\\\example.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"D:\\\\LearningStuff\\\\Automation Script\\\\Javascript\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-unicode-sets-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-class-static-block\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-private-property-in-object\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-class-properties\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-numeric-separator\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-nullish-coalescing-operator\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-optional-chaining\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-json-strings\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-optional-catch-binding\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-async-generators\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-object-rest-spread\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dynamic-import\",\"visitor\":{\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-export-namespace-from\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-import-meta\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]}],\"presets\":[]}:7.22.8:test":{"value":{"code":"\"use strict\";\n\nvar _cucumberFramework = require(\"@wdio/cucumber-framework\");\nconst assert = require('assert');\n\n// Step definition file\nconst {\n  After,\n  Status\n} = require('@cucumber/cucumber');\nconst fs = require('fs-extra');\nconst path = require('path');\n(0, _cucumberFramework.Given)('I open the Google homepage', async () => {\n  await browser.url('https://www.google.com');\n});\n(0, _cucumberFramework.When)('I search for {string}', async searchTerm => {\n  const searchInput = await $('input[name=\"q\"]');\n  await searchInput.setValue(searchTerm);\n  await searchInput.keys('Enter');\n});\n(0, _cucumberFramework.Then)('I should see search results', async () => {\n  const searchResults = await $('div#search');\n  await searchResults.waitForDisplayed();\n  assert.ok(await searchResults.isDisplayed(), 'Search results are not displayed');\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY3VjdW1iZXJGcmFtZXdvcmsiLCJyZXF1aXJlIiwiYXNzZXJ0IiwiQWZ0ZXIiLCJTdGF0dXMiLCJmcyIsInBhdGgiLCJHaXZlbiIsImJyb3dzZXIiLCJ1cmwiLCJXaGVuIiwic2VhcmNoVGVybSIsInNlYXJjaElucHV0IiwiJCIsInNldFZhbHVlIiwia2V5cyIsIlRoZW4iLCJzZWFyY2hSZXN1bHRzIiwid2FpdEZvckRpc3BsYXllZCIsIm9rIiwiaXNEaXNwbGF5ZWQiXSwic291cmNlUm9vdCI6IkQ6XFxMZWFybmluZ1N0dWZmXFxBdXRvbWF0aW9uIFNjcmlwdFxcSmF2YXNjcmlwdFxcVGVzdFxcc3RlcC1kZWZpbml0aW9uc1xcIiwic291cmNlcyI6WyJleGFtcGxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7R2l2ZW4sVGhlbiwgV2hlbn0gZnJvbSAnQHdkaW8vY3VjdW1iZXItZnJhbWV3b3JrJzsgIFxyXG5jb25zdCBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKTtcclxuXHJcblxyXG4vLyBTdGVwIGRlZmluaXRpb24gZmlsZVxyXG5jb25zdCB7IEFmdGVyLCBTdGF0dXMgfSA9IHJlcXVpcmUoJ0BjdWN1bWJlci9jdWN1bWJlcicpO1xyXG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzLWV4dHJhJyk7XHJcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XHJcblxyXG5cclxuR2l2ZW4oJ0kgb3BlbiB0aGUgR29vZ2xlIGhvbWVwYWdlJywgYXN5bmMgKCkgPT4ge1xyXG4gIGF3YWl0IGJyb3dzZXIudXJsKCdodHRwczovL3d3dy5nb29nbGUuY29tJyk7XHJcbn0pO1xyXG5cclxuV2hlbignSSBzZWFyY2ggZm9yIHtzdHJpbmd9JywgYXN5bmMgKHNlYXJjaFRlcm0pID0+IHtcclxuICBjb25zdCBzZWFyY2hJbnB1dCA9IGF3YWl0ICQoJ2lucHV0W25hbWU9XCJxXCJdJyk7XHJcbiAgYXdhaXQgc2VhcmNoSW5wdXQuc2V0VmFsdWUoc2VhcmNoVGVybSk7XHJcbiAgYXdhaXQgc2VhcmNoSW5wdXQua2V5cygnRW50ZXInKTtcclxufSk7XHJcblxyXG5UaGVuKCdJIHNob3VsZCBzZWUgc2VhcmNoIHJlc3VsdHMnLCBhc3luYyAoKSA9PiB7XHJcbiAgY29uc3Qgc2VhcmNoUmVzdWx0cyA9IGF3YWl0ICQoJ2RpdiNzZWFyY2gnKTtcclxuICBhd2FpdCBzZWFyY2hSZXN1bHRzLndhaXRGb3JEaXNwbGF5ZWQoKTtcclxuICBhc3NlcnQub2soYXdhaXQgc2VhcmNoUmVzdWx0cy5pc0Rpc3BsYXllZCgpLCAnU2VhcmNoIHJlc3VsdHMgYXJlIG5vdCBkaXNwbGF5ZWQnKTtcclxufSk7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFBQSxrQkFBQSxHQUFBQyxPQUFBO0FBQ0EsTUFBTUMsTUFBTSxHQUFHRCxPQUFPLENBQUMsUUFBUSxDQUFDOztBQUdoQztBQUNBLE1BQU07RUFBRUUsS0FBSztFQUFFQztBQUFPLENBQUMsR0FBR0gsT0FBTyxDQUFDLG9CQUFvQixDQUFDO0FBQ3ZELE1BQU1JLEVBQUUsR0FBR0osT0FBTyxDQUFDLFVBQVUsQ0FBQztBQUM5QixNQUFNSyxJQUFJLEdBQUdMLE9BQU8sQ0FBQyxNQUFNLENBQUM7QUFHNUIsSUFBQU0sd0JBQUssRUFBQyw0QkFBNEIsRUFBRSxZQUFZO0VBQzlDLE1BQU1DLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLHdCQUF3QixDQUFDO0FBQzdDLENBQUMsQ0FBQztBQUVGLElBQUFDLHVCQUFJLEVBQUMsdUJBQXVCLEVBQUUsTUFBT0MsVUFBVSxJQUFLO0VBQ2xELE1BQU1DLFdBQVcsR0FBRyxNQUFNQyxDQUFDLENBQUMsaUJBQWlCLENBQUM7RUFDOUMsTUFBTUQsV0FBVyxDQUFDRSxRQUFRLENBQUNILFVBQVUsQ0FBQztFQUN0QyxNQUFNQyxXQUFXLENBQUNHLElBQUksQ0FBQyxPQUFPLENBQUM7QUFDakMsQ0FBQyxDQUFDO0FBRUYsSUFBQUMsdUJBQUksRUFBQyw2QkFBNkIsRUFBRSxZQUFZO0VBQzlDLE1BQU1DLGFBQWEsR0FBRyxNQUFNSixDQUFDLENBQUMsWUFBWSxDQUFDO0VBQzNDLE1BQU1JLGFBQWEsQ0FBQ0MsZ0JBQWdCLENBQUMsQ0FBQztFQUN0Q2hCLE1BQU0sQ0FBQ2lCLEVBQUUsQ0FBQyxNQUFNRixhQUFhLENBQUNHLFdBQVcsQ0FBQyxDQUFDLEVBQUUsa0NBQWtDLENBQUM7QUFDbEYsQ0FBQyxDQUFDIn0=","map":{"version":3,"names":["_cucumberFramework","require","assert","After","Status","fs","path","Given","browser","url","When","searchTerm","searchInput","$","setValue","keys","Then","searchResults","waitForDisplayed","ok","isDisplayed"],"sourceRoot":"D:\\LearningStuff\\Automation Script\\Javascript\\Test\\step-definitions\\","sources":["example.js"],"sourcesContent":["import {Given,Then, When} from '@wdio/cucumber-framework';  \r\nconst assert = require('assert');\r\n\r\n\r\n// Step definition file\r\nconst { After, Status } = require('@cucumber/cucumber');\r\nconst fs = require('fs-extra');\r\nconst path = require('path');\r\n\r\n\r\nGiven('I open the Google homepage', async () => {\r\n  await browser.url('https://www.google.com');\r\n});\r\n\r\nWhen('I search for {string}', async (searchTerm) => {\r\n  const searchInput = await $('input[name=\"q\"]');\r\n  await searchInput.setValue(searchTerm);\r\n  await searchInput.keys('Enter');\r\n});\r\n\r\nThen('I should see search results', async () => {\r\n  const searchResults = await $('div#search');\r\n  await searchResults.waitForDisplayed();\r\n  assert.ok(await searchResults.isDisplayed(), 'Search results are not displayed');\r\n});\r\n"],"mappings":";;AAAA,IAAAA,kBAAA,GAAAC,OAAA;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;;AAGhC;AACA,MAAM;EAAEE,KAAK;EAAEC;AAAO,CAAC,GAAGH,OAAO,CAAC,oBAAoB,CAAC;AACvD,MAAMI,EAAE,GAAGJ,OAAO,CAAC,UAAU,CAAC;AAC9B,MAAMK,IAAI,GAAGL,OAAO,CAAC,MAAM,CAAC;AAG5B,IAAAM,wBAAK,EAAC,4BAA4B,EAAE,YAAY;EAC9C,MAAMC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;AAC7C,CAAC,CAAC;AAEF,IAAAC,uBAAI,EAAC,uBAAuB,EAAE,MAAOC,UAAU,IAAK;EAClD,MAAMC,WAAW,GAAG,MAAMC,CAAC,CAAC,iBAAiB,CAAC;EAC9C,MAAMD,WAAW,CAACE,QAAQ,CAACH,UAAU,CAAC;EACtC,MAAMC,WAAW,CAACG,IAAI,CAAC,OAAO,CAAC;AACjC,CAAC,CAAC;AAEF,IAAAC,uBAAI,EAAC,6BAA6B,EAAE,YAAY;EAC9C,MAAMC,aAAa,GAAG,MAAMJ,CAAC,CAAC,YAAY,CAAC;EAC3C,MAAMI,aAAa,CAACC,gBAAgB,CAAC,CAAC;EACtChB,MAAM,CAACiB,EAAE,CAAC,MAAMF,aAAa,CAACG,WAAW,CAAC,CAAC,EAAE,kCAAkC,CAAC;AAClF,CAAC,CAAC"}},"mtime":1689683724554}}